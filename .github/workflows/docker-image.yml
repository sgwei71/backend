name: Backend Docker Image CI/CD Pipeline

# main 브랜치에 push할 때마다 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "*/10 * * * *" # 10분마다 실행

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' # schedule 이벤트에서는 실행하지 않음

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          mkdir -p ./src/env
          echo "${{ secrets.ENV }}" > ./src/env/.env
          docker build -t ${{ secrets.DOCKER_USERNAME }}/dashboard_backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/dashboard_backend:latest

      - name: SSH and Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            # 최신 이미지 미리 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/dashboard_backend:latest
            
            # 기존 backend 컨테이너가 실행 중이면 종료하고 제거
            if docker ps -q -f name=backend; then
              docker stop backend
              docker wait backend  # 컨테이너가 종료될 때까지 기다림
              docker rm backend    # 종료된 후 컨테이너 제거
            fi

            # 새로운 컨테이너 실행
            docker run -d -e TZ=Asia/Seoul --restart always --name backend -p 8080:8080 -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/dashboard_backend:latest

            # 사용하지 않는 이미지 제거
            docker image prune -f

  call-api:
    runs-on: ubuntu-latest

    steps:
      - name: Call Traffic Update API
        run: |
          curl -X POST http://${{ secrets.SERVER_IP }}/api/openApi/traffic

      - name: Call Weather Update API
        run: |
          curl -X POST http://${{ secrets.SERVER_IP }}/api/openApi/weather  
